{"version":3,"sources":["icons/turbines.svg","icons/humidity.svg","icons/clouds.svg","icons/visibility.svg","icons/pressure.svg","hooks/useFetchOnClick.js","handle-fetch.js","components/MainWeather.jsx","components/Forecast.jsx","components/Navbar.jsx","components/SearchBar.jsx","components/Loading/Loading.jsx","components/Error/Error.jsx","pages/index.js","App.js","index.js"],"names":["module","exports","initialState","loading","data","error","fetchReducer","state","action","type","payload","fetchWeatherSearchInput","searchTerm","imperialUnit","a","APIKEY","unit","fetch","currentWeatherPromise","json","currentWeather","lat","coord","lon","forecastPromise","forecast","daily","shift","fetchWeatherGeolocation","then","response","ok","Error","Promise","all","handleFetch","Array","isArray","useStyles","makeStyles","theme","createStyles","root","backgroundColor","SubHeader","styled","h3","Header","p","Flex","div","SmallText","Box","Paper","Hr","FlexCenter","Conditions","Icon","img","MainWeather","props","classes","geolocation","city","name","country","sys","temperature","main","temp","pressure","humidity","clouds","visibility","speed","wind","string","iconSrc","weather","icon","fontSize","standard","prov","Math","round","src","alt","style","marginTop","description","charAt","toUpperCase","slice","DateTime","now","toFormat","className","HumidityIcon","CloudsIcon","VisibilityIcon","TurbinesIcon","PressureIcon","container","margin","Container","Grid","Day","DateDay","span","Data","IconImage","IconDescription","DataContainer","Forecast","getSunrise","sunrise","d","Date","getHours","getMinutes","direction","justify","alignItems","spacing","m","map","day","key","dt","item","elevation","date","dayMonth","getMonth","getDate","getDay","max","min","sunset","SwitchContainer","label","nav","Navbar","Switch","onChange","handleUnitChange","value","color","Button","variant","endIcon","onClick","handleGeolocationChange","input","marginLeft","flex","iconButton","padding","SearchForm","SearchBar","useState","setInput","component","onSubmit","e","preventDefault","InputBase","placeholder","inputProps","target","IconButton","aria-label","handleSearch","Loading","ErrorText","Index","setSearchTerm","setimperialUnit","fetchFunction","useReducer","dispatch","useEffect","fetchWeather","useFetchOnClick","successGeo","pos","coords","latitude","longitude","errorGeo","console","log","navigator","getCurrentPosition","location","width","href","rel","App","ReactDOM","render","document","getElementById"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,6KCErCC,EAAe,CAACC,SAAQ,EAAOC,KAAK,KAAMC,MAAM,MAEhDC,EAAe,SAACC,EAAOC,GAAY,IAC7BC,EAAkBD,EAAlBC,KAAMC,EAAYF,EAAZE,QAEd,OAAQD,GACJ,IAAK,OACD,MAAO,CAACN,SAAQ,EAAMC,KAAK,KAAMC,MAAM,MAC3C,IAAK,UACD,MAAO,CAACF,SAAQ,EAAOC,KAAKM,EAASL,MAAM,MAC/C,IAAK,QACD,MAAO,CAACF,SAAQ,EAAOC,KAAK,KAAMC,MAAMK,GAC5C,QACI,OAAOH,I,SCHJI,E,gFAAf,WAAuCC,EAAYC,GAAnD,6BAAAC,EAAA,6DACUC,EAAS,mCACTC,EAAOH,EAAe,WAAa,SAF7C,SAIwCI,MAAM,qDAAD,OAAsDL,EAAtD,kBAA0EI,EAA1E,kBAAwFD,IAJrI,cAIUG,EAJV,gBAKiCA,EAAsBC,OALvD,cAKUC,EALV,OAMUC,EAAMD,EAAeE,MAAMD,IAC3BE,EAAMH,EAAeE,MAAMC,IAPrC,UASkCN,MAAK,8DAAyDI,EAAzD,gBAAoEE,EAApE,kBAAiFP,EAAjF,kDAA+HD,IATtK,eASUS,EATV,iBAU2BA,EAAgBL,OAV3C,eAUUM,EAVV,QAYaC,MAAMC,MAAM,GAZzB,kBAaW,CAACP,iBAAgBK,aAb5B,6C,+BAiBeG,E,kFAAf,WAAuCP,EAAKE,EAAKV,GAAjD,2BAAAC,EAAA,6DACUC,EAAS,mCACTC,EAAOH,EAAe,WAAa,SAEnCK,EAAwBD,MAAK,8DAAyDI,EAAzD,gBAAoEE,EAApE,kBAAiFP,EAAjF,kBAA+FD,IACjIc,MAAK,SAACC,GACP,GAAIA,EAASC,GACT,OAAOD,EAASX,OAEhB,MAAM,IAAIa,MAAM,2BAGdR,EAAkBP,MAAK,8DAAyDI,EAAzD,gBAAoEE,EAApE,kBAAiFP,EAAjF,kDAA+HD,IAC3Jc,MAAK,SAACC,GACP,GAAIA,EAASC,GACT,OAAOD,EAASX,OAEhB,MAAM,IAAIa,MAAM,2BAjBxB,kBAsB+BC,QAAQC,IAAI,CAAChB,EAAuBM,IAtBnE,OAsBcM,EAtBd,OAuBQV,EAAiBU,EAAS,GAC1BL,EAAWK,EAAS,GAxB5B,wDA0Bc,IAAIE,MAAJ,MA1Bd,eA6BIP,EAASC,MAAMC,MAAM,GA7BzB,kBA8BW,CAACP,iBAAgBK,aA9B5B,2D,sBAiCeU,MA9DE,uCAAG,WAAOvB,EAAYC,GAAnB,6BAAAC,EAAA,0DACZsB,MAAMC,QAAQzB,GADF,wBAENS,EAAMT,EAAW,GACjBW,EAAMX,EAAW,GAHX,SAI6BgB,EAAwBP,EAAKE,EAAKV,GAJ/D,uBAILO,EAJK,EAILA,eAAgBK,EAJX,EAIWA,SAJX,kBAKL,CAACL,iBAAgBK,aALZ,WAMiB,kBAAfb,EANF,kCAO6BD,EAAwBC,EAAYC,GAPjE,wBAOLO,EAPK,EAOLA,eAAgBK,EAPX,EAOWA,SAPX,kBAQL,CAACL,iBAAgBK,aARZ,4CAAH,wD,ylDCYjB,IAAMa,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,KAAM,CACJC,gBAAiB,iCAKjBC,EAAYC,IAAOC,GAAV,KAOTC,EAASF,IAAOG,EAAV,KAMNC,EAAOJ,IAAOK,IAAV,KAMJC,EAAYN,IAAOG,EAAV,KAOTI,EAAMP,YAAOQ,IAAPR,CAAH,KAeHS,EAAKT,IAAOG,EAAV,KAQFO,EAAaV,IAAOK,IAAV,KAOVM,EAAaX,IAAOK,IAAV,KAKVO,GAAOZ,IAAOa,IAAV,KAuFKC,GAlFK,SAACC,GACnB,IAAMC,EAAUvB,IACRlB,EAAgCwC,EAAhCxC,eAAgB0C,EAAgBF,EAAhBE,YAGhBC,EAQJ3C,EARF4C,KACOC,EAOL7C,EAPF8C,IAAOD,QACOE,EAMZ/C,EANFgD,KAAQC,KACAC,EAKNlD,EALFgD,KAAQE,SACAC,EAINnD,EAJFgD,KAAQG,SACErC,EAGRd,EAHFoD,OAAUtC,IACVuC,EAEErD,EAFFqD,WACQC,EACNtD,EADFuD,KAAQD,MAQV,IAL+BE,EAKzBC,EAAO,4CAAwCzD,EAAe0D,QAAQ,GAAGC,KAAlE,WAEb,OACE,iCACE,kBAACnC,EAAD,KACE,kBAAC,IAAD,CAAwBoC,SAAS,UAChClB,EAAW,UAAMA,EAAYmB,SAASlB,KAA3B,aAAoCD,EAAYmB,SAASC,MAAzD,UAAqEnB,EAArE,aAA8EE,IAE5F,kBAAChB,EAAD,KACE,kBAACF,EAAD,KAASoC,KAAKC,MAAMjB,GAApB,QACA,yBAAKkB,IAAKR,EAASS,IAAI,MAEzB,kBAAC1C,EAAD,CAAW2C,MAAO,CAAEC,UAAW,OAjBJZ,EAkBFxD,EAAe0D,QAAQ,GAAGW,aAjBvCC,OAAO,GAAGC,cAAgBf,EAAOgB,MAAM,IAmBnD,kBAACzC,EAAD,iBAAqB0C,WAASC,MAAMC,SAAS,OAE7C,kBAACxC,EAAD,KACE,kBAACH,EAAD,CAAK4C,UAAWnC,EAAQnB,MACtB,kBAACc,EAAD,KACE,kBAACC,GAAD,CAAM4B,IAAKY,MACX,6BACE,kBAAC3C,EAAD,iBACA,kBAACH,EAAD,KAAYoB,EAAZ,OAGJ,kBAACf,EAAD,KACE,kBAACC,GAAD,CAAM4B,IAAKa,MACX,6BACE,kBAAC5C,EAAD,eACA,kBAACH,EAAD,KAAYjB,EAAZ,OAGJ,kBAACsB,EAAD,KACE,kBAACC,GAAD,CAAM4B,IAAKc,MACX,6BACE,kBAAC7C,EAAD,mBACA,kBAACH,EAAD,KAAYsB,EAAZ,UAIN,kBAACrB,EAAD,CAAK4C,UAAWnC,EAAQnB,MACtB,kBAACc,EAAD,KACE,kBAACC,GAAD,CAAM4B,IAAKe,MACX,6BACE,kBAAC9C,EAAD,aACA,kBAACH,EAAD,KAAYuB,EAAZ,WAGJ,kBAAClB,EAAD,KACE,kBAACC,GAAD,CAAM4B,IAAKgB,MACX,6BACE,kBAAC/C,EAAD,iBACA,kBAACH,EAAD,KAAYmB,EAAZ,c,i3BCzJd,IAAMhC,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvC8D,UAAW,CACTC,OAAQ,EACRf,UAAW,IAEb9C,KAAM,CACJC,gBAAiB,gCAIf6D,GAAY3D,YAAO4D,KAAP5D,CAAH,MAKT6D,GAAM7D,YAAOQ,IAAPR,CAAH,MAOH8D,GAAU9D,IAAO+D,KAAV,MAKPC,GAAOhE,IAAO+D,KAAV,MAMJE,GAAYjE,IAAOa,IAAV,MAITqD,GAAkBlE,IAAO+D,KAAV,MAMfI,GAAgBnE,IAAOK,IAAV,MAkFJ+D,GA9EE,SAACrD,GAChB,IAAMC,EAAUvB,KACRb,EAA2BmC,EAA3BnC,SA0BR,SAASyF,EAAWC,GAClB,IAAIC,EAAI,IAAIC,KAAe,IAAVF,GACjB,OAAOC,EAAEE,WAAa,KAAOF,EAAEG,aAAe,GAAK,IAAM,IAAMH,EAAEG,aAWnE,IAAMvG,EAvC6B4C,EAAjB/C,aAuCU,QAAO,QAEnC,OACE,kBAAC2F,GAAD,CACER,UAAWnC,EAAQyC,UACnBA,WAAS,EACTkB,UAAU,MACVC,QAAQ,SACRC,WAAW,SACXC,QAAS,EACTC,EAAG,GAEFnG,EAASC,MAAMmG,KAAI,SAACC,GAAD,OAClB,kBAACrB,GAAA,EAAD,CAAMsB,IAAKD,EAAIE,GAAIC,MAAI,GACrB,kBAACvB,GAAD,CAAKV,UAAWnC,EAAQnB,KAAMwF,UAAW,GACvC,kBAACvB,GAAD,KApDV,SAAiBwB,GACf,IAAIf,EAAI,IAAIC,KAAY,IAAPc,GACXC,IAAahB,EAAEiB,WAAa,GAAK,IAAMjB,EAAEkB,UAE/C,OAAQlB,EAAEmB,UACR,KAAK,EACH,MAAO,UAAYH,EACrB,KAAK,EACH,MAAO,UAAYA,EACrB,KAAK,EACH,MAAO,WAAaA,EACtB,KAAK,EACH,MAAO,aAAeA,EACxB,KAAK,EACH,MAAO,YAAcA,EACvB,KAAK,EACH,MAAO,UAAYA,EACrB,KAAK,EACH,MAAO,YAAcA,GAkCPE,CAAQR,EAAIE,KACtB,kBAAClB,GAAD,CAAWzB,KAxBJN,EAwBiB+C,EAAIhD,QAAQ,GAAGC,KAvBzC,qCAAN,OAA4CA,EAA5C,YAuBsDO,IAAKwC,EAAIhD,QAAQ,GAAGV,OAClE,kBAAC2C,GAAD,MArBqBnC,EAqBmBkD,EAAIhD,QAAQ,GAAGW,aApBjDC,OAAO,GAAGC,cAAgBf,EAAOgB,MAAM,IAqB7C,kBAACoB,GAAD,KACE,kBAACH,GAAD,aACQiB,EAAIzD,KAAKmE,IADjB,IACuBxH,GAEvB,kBAAC6F,GAAD,aACQiB,EAAIzD,KAAKoE,IADjB,IACuBzH,GAEvB,kBAAC6F,GAAD,kBAAiBiB,EAAIvD,SAArB,KACA,kBAACsC,GAAD,kBAAiBiB,EAAIxD,UACrB,kBAACuC,GAAD,iBAAgBK,EAAWY,EAAIX,UAC/B,kBAACN,GAAD,gBAAeK,EAAWY,EAAIY,YAhC1C,IAA+B9D,EAJdG,O,uRC/EnB,IAAM4D,GAAkB9F,IAAO+F,MAAV,MAKfpC,GAAY3D,IAAOgG,IAAV,MAKA,SAASC,GAAOlF,GAC7B,OACE,kBAAC,GAAD,KACE,kBAAC+E,GAAD,KACE,kBAAClC,GAAA,EAAD,CAAMwB,MAAI,GAAV,SACA,kBAACxB,GAAA,EAAD,CAAMwB,MAAI,GACR,kBAACc,GAAA,EAAD,CAAQC,SAAUpF,EAAMqF,iBAAkBC,MAAOtF,EAAM/C,aAAcsI,MAAM,aAE7E,kBAAC1C,GAAA,EAAD,CAAMwB,MAAI,GAAV,UAGF,kBAACmB,GAAA,EAAD,CACEC,QAAQ,YACRF,MAAM,UACNG,QAAS,kBAAC,KAAD,MACTC,QAAS3F,EAAM4F,yBAJjB,Y,8QCpBN,IAAMlH,GAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,KAAM,CACJC,gBAAiB,4BAEnB8G,MAAO,CACLC,WAAYlH,EAAMmF,QAAQ,GAC1BgC,KAAM,GAERC,WAAY,CACVC,QAAS,SAKTC,GAAajH,YAAOQ,IAAPR,CAAH,MAWD,SAASkH,GAAUnG,GAChC,IAAMC,EAAUvB,KADuB,EAEb0H,mBAAS,IAFI,mBAEhCP,EAFgC,KAEzBQ,EAFyB,KAIvC,OACE,kBAACH,GAAD,CACEI,UAAU,OACVlE,UAAWnC,EAAQnB,KACnByH,SAAU,SAACC,GACTA,EAAEC,mBAGJ,kBAACC,GAAA,EAAD,CACEC,YAAY,cACZC,WAAY,CAAE,aAAc,eAC5BxB,SAAU,SAACoB,GACTH,EAASG,EAAEK,OAAOvB,QAEpBlD,UAAWnC,EAAQ4F,MACnBP,MAAOO,IAET,kBAACiB,GAAA,EAAD,CACE1E,UAAWnC,EAAQ+F,WACnBnJ,KAAK,SACLkK,aAAW,SACXpB,QAAS,kBAAM3F,EAAMgH,aAAanB,KAElC,kBAAC,KAAD,Q,UCpDOoB,GANC,WACZ,OACI,yBAAK7E,UAAU,cAAa,8BAAW,8BAAW,8BAAW,8BAAW,8BAAW,8BAAW,8BAAW,gC,mLCFjH,IAAM8E,GAAYjI,IAAO+D,KAAV,MAYA5E,GAJD,WACZ,OAAO,kBAAC8I,GAAD,8B,kKCDT,IAAMtE,GAAY3D,IAAOK,IAAV,MAOA,SAAS6H,KAAS,IAAD,EACMf,mBAAS,IADf,mBACvBpJ,EADuB,KACXoK,EADW,OAEUhB,oBAAS,GAFnB,mBAEvBnJ,EAFuB,KAEToK,EAFS,ORCD,SAACC,EAAetK,EAAYC,GAAkB,IAAD,EAC9CsK,qBAAW7K,EAAcJ,GADqB,mBACjEK,EADiE,KAC1D6K,EAD0D,KAkBxE,OAfAC,qBAAU,YACY,uCAAG,4BAAAvK,EAAA,0DACdF,EADc,wBAEbwK,EAAS,CAAE3K,KAAM,SAFJ,kBAIcyK,EAActK,EAAYC,GAJxC,OAIHiB,EAJG,OAKTsJ,EAAS,CAAE3K,KAAM,UAAWC,QAAQoB,IAL3B,gDAOTsJ,EAAS,CAAC3K,KAAM,QAASC,QAAQ,EAAD,KAPvB,yDAAH,qDAWlB4K,KACD,CAACJ,EAAetK,EAAYC,IAExBN,EQhBwBgL,CAAgBL,EAAetK,EAAYC,GAApET,EAHsB,EAGtBA,KAAMD,EAHgB,EAGhBA,QAASE,EAHO,EAGPA,MAEvB,SAASmL,EAAWC,GAClBT,EAAc,CAACS,EAAIC,OAAOC,SAAUF,EAAIC,OAAOE,YAGjD,SAASC,EAASzB,GAChB0B,QAAQC,IAAI3B,GAmBd,OAhBAiB,qBAAU,WACRW,UAAUlI,YAAYmI,mBAAmBT,EAAYK,KACpD,IAeD,kBAAC,GAAD,KACE,kBAAC/C,GAAD,CACEG,iBAXN,WACEgC,GAAiBpK,IAWb2I,wBAhBN,WACEwC,UAAUlI,YAAYmI,mBAAmBT,EAAYK,IAgBjDhL,aAAcA,IAEhB,kBAACkJ,GAAD,CAAWa,aAXf,SAAsBnB,GACpBuB,EAAcvB,MAWXtJ,GAAW,kBAAC,GAAD,MACXE,GAAS,kBAAC,GAAD,MACTD,GACC,oCACE,kBAAC,GAAD,CACEgB,eAAgBhB,EAAKgB,eACrB8K,SAAU9L,EAAK0D,YACfjD,aAAcA,IAEhB,wBAAI0E,MAAO,CAAE4G,MAAO,MAAO3G,UAAW,UACtC,wBAAID,MAAO,CAAE4D,MAAO,QAASnE,SAAU,WAAvC,YACA,kBAAC,GAAD,CAAUvD,SAAUrB,EAAKqB,SAAUZ,aAAcA,IACjD,4BAAQ0E,MAAO,CAAE4D,MAAO,QAAS5C,OAAQ,WAAzC,mBACmB,IACjB,uBACEhB,MAAO,CAAE4D,MAAO,YAChBiD,KAAK,iCACL3B,OAAO,SACP4B,IAAI,uBAJN,sBC9DGC,OAJf,WACE,OAAO,kBAACvB,GAAD,OCATwB,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.6bcb5a46.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/turbines.24ad2ac4.svg\";","module.exports = __webpack_public_path__ + \"static/media/humidity.30bee1d5.svg\";","module.exports = __webpack_public_path__ + \"static/media/clouds.19461b5b.svg\";","module.exports = __webpack_public_path__ + \"static/media/visibility.c6b904c5.svg\";","module.exports = __webpack_public_path__ + \"static/media/pressure.27a69e72.svg\";","import { useReducer, useEffect } from \"react\";\n\nconst initialState = {loading:false, data:null, error:null }\n\nconst fetchReducer = (state, action) => {\n    const { type, payload } = action;\n\n    switch (type) {\n        case 'LOAD':\n            return {loading:true, data:null, error:null};\n        case 'SUCCESS':\n            return {loading:false, data:payload, error:null};\n        case 'ERROR':\n            return {loading:false, data:null, error:payload};\n        default:\n            return state;\n    }\n}\n\nexport const useFetchOnClick = (fetchFunction, searchTerm, imperialUnit) => {\n    const [state, dispatch] = useReducer(fetchReducer, initialState);\n\n    useEffect(() => {\n        const fetchWeather = async () => {\n            if(searchTerm){\n                dispatch({ type: 'LOAD' });\n                try {\n                    const response = await fetchFunction(searchTerm, imperialUnit);\n                    dispatch({ type: 'SUCCESS', payload:response })\n                }catch(error){\n                    dispatch({type: 'ERROR', payload:error})\n                }\n            }\n        };\n        fetchWeather();\n    }, [fetchFunction, searchTerm, imperialUnit]);\n\n    return state;\n}","const handleFetch = async (searchTerm, imperialUnit) => {\n    if (Array.isArray(searchTerm)) {\n        const lat = searchTerm[0];\n        const lon = searchTerm[1];\n        const {currentWeather, forecast} = await fetchWeatherGeolocation(lat, lon, imperialUnit);\n        return {currentWeather, forecast};\n    } else if (typeof searchTerm === 'string') {\n        const {currentWeather, forecast} = await fetchWeatherSearchInput(searchTerm, imperialUnit);\n        return {currentWeather, forecast};\n    }\n}\n\nasync function fetchWeatherSearchInput(searchTerm, imperialUnit) {\n    const APIKEY = '30d2d7664fe7b2ac7e54fdca4bc7f915';\n    const unit = imperialUnit ? 'imperial' : 'metric';\n\n    const currentWeatherPromise = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${searchTerm}&units=${unit}&appid=${APIKEY}`);\n    const currentWeather = await currentWeatherPromise.json();\n    const lat = currentWeather.coord.lat;\n    const lon = currentWeather.coord.lon;\n\n    const forecastPromise = await fetch (`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&units=${unit}&exclude=current,minutely,hourly&appid=${APIKEY}`);\n    const forecast = await forecastPromise.json();\n\n    forecast.daily.shift(0); // removes current day on forecast\n    return {currentWeather, forecast};\n}\n\n\nasync function fetchWeatherGeolocation(lat, lon, imperialUnit) {\n    const APIKEY = '30d2d7664fe7b2ac7e54fdca4bc7f915';\n    const unit = imperialUnit ? 'imperial' : 'metric';\n\n    const currentWeatherPromise = fetch (`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=${unit}&appid=${APIKEY}`)\n    .then((response) => {\n    if (response.ok) {\n        return response.json();\n    } else {\n        throw new Error('Something went wrong');\n    }})\n\n    const forecastPromise = fetch (`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&units=${unit}&exclude=current,minutely,hourly&appid=${APIKEY}`)\n    .then((response) => {\n    if (response.ok) {\n        return response.json();\n    } else {\n        throw new Error('Something went wrong');\n    }})\n\n    let currentWeather, forecast;\n    try {\n        const response = await Promise.all([currentWeatherPromise, forecastPromise]);\n        currentWeather = response[0];\n        forecast = response[1]\n    } catch (error) {\n        throw new Error(error)\n    }\n    \n    forecast.daily.shift(0); // removes current day on forecast\n    return {currentWeather, forecast};\n}\n\nexport default handleFetch;\n","import React from 'react';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport LocationOnOutlinedIcon from '@material-ui/icons/LocationOnOutlined';\nimport styled from '@emotion/styled';\nimport Paper from '@material-ui/core/Paper';\nimport { DateTime } from 'luxon';\nimport TurbinesIcon from '../icons/turbines.svg';\nimport HumidityIcon from '../icons/humidity.svg';\nimport CloudsIcon from '../icons/clouds.svg';\nimport VisibilityIcon from '../icons/visibility.svg';\nimport PressureIcon from '../icons/pressure.svg';\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      backgroundColor: 'rgba(255, 255, 255, 0.1)',\n    },\n  })\n);\n\nconst SubHeader = styled.h3`\n  color: white;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst Header = styled.p`\n  color: white;\n  font-size: 4.5rem;\n  margin: 0.5em 0;\n`;\n\nconst Flex = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst SmallText = styled.p`\n  text-align: center;\n  color: grey;\n  font-size: 0.6rem;\n  margin: 0 5px;\n`;\n\nconst Box = styled(Paper)`\n  display: flex;\n  align-items: center;\n  justify-content: space-around;\n  text-align: center;\n  margin: 20px 0px;\n  background-color: rgba(255, 255, 255, 0.4);\n  padding: 20px 10px;\n  width: 100%;\n  max-width: 100%;\n  @media (min-width: 550px) {\n    width: 60%;\n  }\n`;\n\nconst Hr = styled.p`\n  font-weight: 600;\n  margin: 0 10px;\n  margin-bottom: 6px;\n  color: white;\n  font-size: 0.8rem;\n`;\n\nconst FlexCenter = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-wrap: wrap;\n`;\n\nconst Conditions = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst Icon = styled.img`\n  width: 1.5rem;\n  height: 1.5rem;\n`;\n\nconst MainWeather = (props) => {\n  const classes = useStyles();\n  const { currentWeather, geolocation } = props;\n\n  const {\n    name: city,\n    sys: { country },\n    main: { temp: temperature },\n    main: { pressure },\n    main: { humidity },\n    clouds: { all },\n    visibility,\n    wind: { speed },\n  } = currentWeather;\n\n  function capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  }\n\n  // 03d.png\n  const iconSrc = `https://openweathermap.org/img/wn/${currentWeather.weather[0].icon}@2x.png`;\n\n  return (\n    <section>\n      <SubHeader>\n        <LocationOnOutlinedIcon fontSize=\"small\" />\n        {geolocation ? `${geolocation.standard.city}, ${geolocation.standard.prov}` : `${city}, ${country}`}\n      </SubHeader>\n      <Flex>\n        <Header>{Math.round(temperature)}°</Header>\n        <img src={iconSrc} alt=\"\"></img>\n      </Flex>\n      <SubHeader style={{ marginTop: '0' }}>\n        {capitalizeFirstLetter(currentWeather.weather[0].description)}\n      </SubHeader>\n      <SmallText>Updated: {DateTime.now().toFormat('FF')}</SmallText>\n\n      <FlexCenter>\n        <Box className={classes.root}>\n          <Conditions>\n            <Icon src={HumidityIcon}></Icon>\n            <div>\n              <Hr>Humidity</Hr>\n              <SmallText>{humidity}%</SmallText>\n            </div>\n          </Conditions>\n          <Conditions>\n            <Icon src={CloudsIcon}></Icon>\n            <div>\n              <Hr>Clouds</Hr>\n              <SmallText>{all}%</SmallText>\n            </div>\n          </Conditions>\n          <Conditions>\n            <Icon src={VisibilityIcon}></Icon>\n            <div>\n              <Hr>Visibility</Hr>\n              <SmallText>{visibility} Km</SmallText>\n            </div>\n          </Conditions>\n        </Box>\n        <Box className={classes.root}>\n          <Conditions>\n            <Icon src={TurbinesIcon}></Icon>\n            <div>\n              <Hr>Wind</Hr>\n              <SmallText>{speed} Km/h</SmallText>\n            </div>\n          </Conditions>\n          <Conditions>\n            <Icon src={PressureIcon}></Icon>\n            <div>\n              <Hr>Pressure</Hr>\n              <SmallText>{pressure} hPa</SmallText>\n            </div>\n          </Conditions>\n        </Box>\n      </FlexCenter>\n    </section>\n  );\n};\n\nexport default MainWeather;\n","import React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport styled from '@emotion/styled';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    margin: 0,\n    marginTop: 20,\n  },\n  root: {\n    backgroundColor: 'rgba(255, 255, 255, 0.1)',\n  },\n}));\n\nconst Container = styled(Grid)`\n  max-width: 100%;\n  margin-top: 20px;\n`;\n\nconst Day = styled(Paper)`\n  width: 200px;\n  text-align: center;\n  background-color: rgba(255, 255, 255, 0.4);\n  padding: 10px;\n`;\n\nconst DateDay = styled.span`\n  display: flex;\n  justify-content: center;\n`;\n\nconst Data = styled.span`\n  display: inline-block;\n  width: 100%;\n  margin: 2px 0;\n`;\n\nconst IconImage = styled.img`\n  width: 50px;\n`;\n\nconst IconDescription = styled.span`\n  display: flex;\n  justify-content: center;\n  margin-bottom: 10px;\n`;\n\nconst DataContainer = styled.div`\n  text-align: center;\n`;\n\nconst Forecast = (props) => {\n  const classes = useStyles();\n  const { forecast, imperialUnit } = props;\n\n  function getDate(date) {\n    let d = new Date(date * 1000);\n    const dayMonth = +(d.getMonth() + 1) + '/' + d.getDate();\n\n    switch (d.getDay()) {\n      case 0:\n        return 'Sunday ' + dayMonth;\n      case 1:\n        return 'Monday ' + dayMonth;\n      case 2:\n        return 'Tuesday ' + dayMonth;\n      case 3:\n        return 'Wednesday ' + dayMonth;\n      case 4:\n        return 'Thursday ' + dayMonth;\n      case 5:\n        return 'Friday ' + dayMonth;\n      case 6:\n        return 'Saturday ' + dayMonth;\n      default:\n        break;\n    }\n  }\n\n  function getSunrise(sunrise) {\n    let d = new Date(sunrise * 1000);\n    return d.getHours() + ':' + (d.getMinutes() < 10 ? '0' : '') + d.getMinutes();\n  }\n\n  function getIcon(icon) {\n    return `https://openweathermap.org/img/wn/${icon}@2x.png`;\n  }\n\n  function capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  }\n\n  const unit = imperialUnit ? 'F°' : 'C°';\n\n  return (\n    <Container\n      className={classes.container}\n      container\n      direction=\"row\"\n      justify=\"center\"\n      alignItems=\"center\"\n      spacing={4}\n      m={2}\n    >\n      {forecast.daily.map((day) => (\n        <Grid key={day.dt} item>\n          <Day className={classes.root} elevation={3}>\n            <DateDay>{getDate(day.dt)}</DateDay>\n            <IconImage src={getIcon(day.weather[0].icon)} alt={day.weather[0].main} />\n            <IconDescription>{capitalizeFirstLetter(day.weather[0].description)}</IconDescription>\n            <DataContainer>\n              <Data>\n                Max: {day.temp.max} {unit}\n              </Data>\n              <Data>\n                Min: {day.temp.min} {unit}\n              </Data>\n              <Data>Humidity: {day.humidity}%</Data>\n              <Data>Pressure: {day.pressure}</Data>\n              <Data>Sunrise: {getSunrise(day.sunrise)}</Data>\n              <Data>Sunset: {getSunrise(day.sunset)}</Data>\n            </DataContainer>\n          </Day>\n        </Grid>\n      ))}\n    </Container>\n  );\n};\n\nexport default Forecast;\n","import React from 'react';\nimport Switch from '@material-ui/core/Switch';\nimport Grid from '@material-ui/core/Grid';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport Button from '@material-ui/core/Button';\nimport styled from '@emotion/styled';\n\nconst SwitchContainer = styled.label`\n  display: flex;\n  align-items: center;\n`;\n\nconst Container = styled.nav`\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport default function Navbar(props) {\n  return (\n    <Container>\n      <SwitchContainer>\n        <Grid item>F°</Grid>\n        <Grid item>\n          <Switch onChange={props.handleUnitChange} value={props.imperialUnit} color=\"default\" />\n        </Grid>\n        <Grid item>C°</Grid>\n      </SwitchContainer>\n\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        endIcon={<LocationOnIcon />}\n        onClick={props.handleGeolocationChange}\n      >\n        Find me\n      </Button>\n    </Container>\n  );\n}\n","import React, { useState } from 'react';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport InputBase from '@material-ui/core/InputBase';\nimport IconButton from '@material-ui/core/IconButton';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Paper from '@material-ui/core/Paper';\nimport styled from '@emotion/styled';\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      backgroundColor: 'rgba(255, 255, 255, 0.8)',\n    },\n    input: {\n      marginLeft: theme.spacing(1),\n      flex: 1,\n    },\n    iconButton: {\n      padding: 10,\n    },\n  })\n);\n\nconst SearchForm = styled(Paper)`\n  padding: 2px 4px;\n  display: flex;\n  align-items: center;\n  width: 512px;\n  height: 44px;\n  max-width: 100%;\n  margin: auto;\n  margin-top: 3rem;\n`;\n\nexport default function SearchBar(props) {\n  const classes = useStyles();\n  const [input, setInput] = useState('');\n\n  return (\n    <SearchForm\n      component=\"form\"\n      className={classes.root}\n      onSubmit={(e) => {\n        e.preventDefault();\n      }}\n    >\n      <InputBase\n        placeholder=\"Search city\"\n        inputProps={{ 'aria-label': 'Search city' }}\n        onChange={(e) => {\n          setInput(e.target.value);\n        }}\n        className={classes.input}\n        value={input}\n      />\n      <IconButton\n        className={classes.iconButton}\n        type=\"submit\"\n        aria-label=\"search\"\n        onClick={() => props.handleSearch(input)}\n      >\n        <SearchIcon />\n      </IconButton>\n    </SearchForm>\n  );\n}\n","import React from 'react';\nimport './loading.css'\n\nconst Loading = () => {\n    return (\n        <div className=\"lds-roller\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\n    )\n}\n\nexport default Loading;","import React from 'react';\nimport styled from '@emotion/styled';\n\nconst ErrorText = styled.span`\n  font-size: 1.3rem;\n  display: flex;\n  justify-content: center;\n  margin-top: 5rem;\n  color: white;\n`;\n\nconst Error = () => {\n  return <ErrorText>Something went wrong</ErrorText>;\n};\n\nexport default Error;\n","import React, { useState, useEffect } from 'react';\nimport { useFetchOnClick } from '../hooks/useFetchOnClick';\nimport fetchFunction from '../handle-fetch';\nimport MainWeather from '../components/MainWeather';\nimport Forecast from '../components/Forecast';\nimport Navbar from '../components/Navbar';\nimport SearchBar from '../components/SearchBar';\nimport Loading from '../components/Loading/Loading';\nimport Error from '../components/Error/Error';\nimport styled from '@emotion/styled';\n\nconst Container = styled.div`\n  margin-left: 20px;\n  margin-right: 20px;\n  margin-top: 20px;\n  text-align: center;\n`;\n\nexport default function Index() {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [imperialUnit, setimperialUnit] = useState(true);\n  const { data, loading, error } = useFetchOnClick(fetchFunction, searchTerm, imperialUnit);\n\n  function successGeo(pos) {\n    setSearchTerm([pos.coords.latitude, pos.coords.longitude]);\n  }\n\n  function errorGeo(e) {\n    console.log(e);\n  }\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(successGeo, errorGeo);\n  }, []);\n\n  function handleGeolocationChange() {\n    navigator.geolocation.getCurrentPosition(successGeo, errorGeo);\n  }\n\n  function handleUnitChange() {\n    setimperialUnit(!imperialUnit);\n  }\n\n  function handleSearch(input) {\n    setSearchTerm(input);\n  }\n\n  return (\n    <Container>\n      <Navbar\n        handleUnitChange={handleUnitChange}\n        handleGeolocationChange={handleGeolocationChange}\n        imperialUnit={imperialUnit}\n      />\n      <SearchBar handleSearch={handleSearch} />\n      {loading && <Loading />}\n      {error && <Error />}\n      {data && (\n        <>\n          <MainWeather\n            currentWeather={data.currentWeather}\n            location={data.geolocation}\n            imperialUnit={imperialUnit}\n          />\n          <hr style={{ width: '85%', marginTop: '50px' }}></hr>\n          <h2 style={{ color: 'white', fontSize: '2.8rem' }}>Forecast</h2>\n          <Forecast forecast={data.forecast} imperialUnit={imperialUnit} />\n          <footer style={{ color: 'white', margin: '15px 0' }}>\n            Data provided by{' '}\n            <a\n              style={{ color: 'lavender' }}\n              href=\"https://openweathermap.org/api\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              OpenWeather API\n            </a>\n          </footer>\n        </>\n      )}\n    </Container>\n  );\n}\n","import React from 'react';\nimport Index from './pages/index';\n\nfunction App() {\n  return <Index />;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}