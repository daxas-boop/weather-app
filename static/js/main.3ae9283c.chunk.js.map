{"version":3,"sources":["components/Error/error_icon.png","hooks/useFetchOnClick.js","components/Loading/Loading.jsx","components/Forecast.jsx","components/WeatherCard.jsx","handle-fetch.js","components/Error/Error.jsx","components/WeatherSearch.jsx","App.js","index.js"],"names":["module","exports","initialState","loading","data","error","fetchReducer","state","action","type","payload","Loading","className","useStyles","makeStyles","theme","container","margin","marginTop","Container","styled","Grid","Day","Paper","DateDay","span","Data","IconImage","img","IconDescription","DataContainer","div","Forecast","props","classes","forecast","getSunrise","sunrise","d","Date","getHours","getMinutes","unit","imperialUnit","direction","justify","alignItems","spacing","m","daily","map","day","key","dt","item","elevation","date","dayMonth","getMonth","getDate","getDay","src","icon","weather","alt","main","string","description","charAt","toUpperCase","slice","temp","max","min","humidity","pressure","sunset","h4","WeatherCard","currentWeather","location","city","name","country","sys","temperature","feels_like","temp_min","temp_max","iconSrc","standard","prov","fetchGeolocation","searchTerm","a","replace","trim","fetch","response","json","responseJSON","geolocation","Error","fetchWeather","lat","lon","APIKEY","currentWeatherPromise","then","ok","forecastPromise","Promise","all","shift","handleFetch","Array","isArray","latt","longt","ErrorImage","ErrorText","errorIcon","locationBtn","position","right","top","input","marginLeft","flex","iconButton","padding","wind","keyframes","section","SearchForm","SwitchContainer","label","AnimationWrapper","WeatherSearch","useState","setInput","setSearchTerm","setimperialUnit","fetchFunction","useReducer","dispatch","useEffect","useFetchOnClick","successGeo","pos","coords","latitude","longitude","errorGeo","e","console","log","navigator","getCurrentPosition","component","root","onSubmit","preventDefault","InputBase","placeholder","inputProps","onChange","target","value","IconButton","aria-label","onClick","Button","variant","color","endIcon","Switch","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3ae9283c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/error_icon.3038ccf0.png\";","import { useReducer, useEffect } from \"react\";\r\n\r\nconst initialState = {loading:false, data:null, error:null }\r\n\r\nconst fetchReducer = (state, action) => {\r\n    const { type, payload } = action;\r\n\r\n    switch (type) {\r\n        case 'LOAD':\r\n            return {loading:true, data:null, error:null};\r\n        case 'SUCCESS':\r\n            return {loading:false, data:payload, error:null};\r\n        case 'ERROR':\r\n            return {loading:false, data:null, error:payload};\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const useFetchOnClick = (fetchFunction, searchTerm, imperialUnit) => {\r\n    const [state, dispatch] = useReducer(fetchReducer, initialState);\r\n\r\n    useEffect(() => {\r\n        const fetchWeather = async () => {\r\n            if(searchTerm){\r\n                dispatch({ type: 'LOAD' });\r\n                try {\r\n                    const response = await fetchFunction(searchTerm, imperialUnit);\r\n                    dispatch({ type: 'SUCCESS', payload:response })\r\n                }catch(error){\r\n                    dispatch({type: 'ERROR', payload:error})\r\n                }\r\n            }\r\n        };\r\n        fetchWeather();\r\n    }, [fetchFunction, searchTerm, imperialUnit]);\r\n\r\n    return state;\r\n}","import React from 'react';\r\nimport './loading.css'\r\n\r\nconst Loading = () => {\r\n    return (\r\n        <div className=\"lds-roller\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\r\n    )\r\n}\r\n\r\nexport default Loading;","import React from 'react'\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport styled from '@emotion/styled';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  container:{\r\n    margin:0,\r\n    marginTop:20,\r\n  }\r\n}));\r\n\r\nconst Container = styled(Grid) `\r\n    max-width:100%;\r\n    margin-top:20px;\r\n`\r\n\r\nconst Day = styled(Paper) `\r\n    width:200px;\r\n    text-align:center;\r\n    background-color: #0093E9;\r\n    background-image: linear-gradient(160deg, #0093E9 0%, #80D0C7 100%);\r\n    padding:10px;\r\n`\r\n\r\nconst DateDay = styled.span `\r\n    display:flex;\r\n    justify-content:center;\r\n`\r\n\r\nconst Data = styled.span `\r\n    display: inline-block;\r\n    width:100%;\r\n    margin:2px 0;\r\n`\r\n\r\nconst IconImage = styled.img `\r\n    width:50px;\r\n`\r\n\r\nconst IconDescription = styled.span `\r\n    display:flex;\r\n    justify-content:center;\r\n    margin-bottom:10px;\r\n`\r\n\r\nconst DataContainer = styled.div `\r\n    text-align:center;\r\n`\r\n\r\nconst Forecast = (props) => {\r\n    const classes = useStyles();\r\n    const {forecast, imperialUnit} = props;\r\n\r\n    function getDate (date) {\r\n        let d = new Date (date*1000)\r\n        const dayMonth = + (d.getMonth()+1) +'/' + d.getDate()\r\n\r\n        switch (d.getDay()) {\r\n            case 0:\r\n                return 'Sunday ' + dayMonth;\r\n            case 1:\r\n                return 'Monday ' + dayMonth;\r\n            case 2:\r\n                return 'Tuesday ' + dayMonth;\r\n            case 3:\r\n                return 'Wednesday ' + dayMonth;\r\n            case 4:\r\n                return 'Thursday ' + dayMonth;\r\n            case 5:\r\n                return 'Friday ' + dayMonth;\r\n            case 6:\r\n                return 'Saturday ' + dayMonth;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    function getSunrise(sunrise) {\r\n        let d = new Date (sunrise*1000)\r\n        return d.getHours() + ':' + (d.getMinutes()<10?'0':'') + d.getMinutes()   \r\n    }\r\n\r\n    function getIcon (icon){\r\n        return `https://openweathermap.org/img/wn/${icon}@2x.png`\r\n    }\r\n\r\n    function capitalizeFirstLetter(string) {\r\n        return string.charAt(0).toUpperCase() + string.slice(1);\r\n    }\r\n\r\n    const unit = imperialUnit ? 'F°' : 'C°';\r\n\r\n    return (\r\n        <Container\r\n            className={classes.container}\r\n            container\r\n            direction=\"row\"\r\n            justify=\"center\"\r\n            alignItems=\"center\"\r\n            spacing={4}\r\n            m={2}\r\n        >\r\n            {forecast.daily.map( day => \r\n                <Grid key={day.dt} item>\r\n                    <Day elevation={3}>\r\n                        <DateDay>{getDate(day.dt)}</DateDay>\r\n                        <IconImage src={getIcon(day.weather[0].icon)} alt={day.weather[0].main} />\r\n                        <IconDescription>{capitalizeFirstLetter(day.weather[0].description)}</IconDescription>\r\n                        <DataContainer>\r\n                            <Data>Max: {day.temp.max} {unit}</Data>\r\n                            <Data>Min: {day.temp.min} {unit}</Data>\r\n                            <Data>Humidity: {day.humidity}%</Data>\r\n                            <Data>Pressure: {day.pressure}</Data>\r\n                            <Data>Sunrise: {getSunrise(day.sunrise)}</Data>\r\n                            <Data>Sunset: {getSunrise(day.sunset)}</Data>\r\n                        </DataContainer>\r\n                    </Day>\r\n                </Grid>\r\n            )}\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Forecast;","import React from 'react';\r\nimport styled from '@emotion/styled';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nconst Container = styled(Paper) `\r\n    margin: 0 auto;\r\n    text-align:center;\r\n    max-width:600px;\r\n    min-width:350px;\r\n    background-color: #0093E9;\r\n    background-image: linear-gradient(160deg, #0093E9 0%, #80D0C7 100%);\r\n    @media (max-width:768px){\r\n        min-width:320px;\r\n    }\r\n`\r\n\r\nconst IconDescription = styled.h4 `\r\n    margin-top:0;\r\n`\r\n\r\nconst WeatherCard = (props) => {\r\n    const {currentWeather, imperialUnit, location} = props;\r\n\r\n    const{\r\n        name: city,\r\n        sys: {country},\r\n        main: {temp : temperature},\r\n        main: {feels_like},\r\n        main: {pressure},\r\n        main: {humidity},\r\n        main: {temp_min},\r\n        main: {temp_max},\r\n    } = currentWeather\r\n\r\n    function capitalizeFirstLetter(string) {\r\n        return string.charAt(0).toUpperCase() + string.slice(1);\r\n    }\r\n\r\n    const iconSrc = `https://openweathermap.org/img/wn/${currentWeather.weather[0].icon}@2x.png`\r\n    const unit = imperialUnit ? 'F°' : 'C°';\r\n\r\n    return (\r\n        <Container elevation={3}>\r\n            <img src={iconSrc} alt=''></img>\r\n            <IconDescription>{capitalizeFirstLetter(currentWeather.weather[0].description)}</IconDescription>\r\n            <h2>{location ? `${location.standard.city}, ${location.standard.prov}` : `${city}, ${country}` }</h2>\r\n            <h3>{temperature} {unit}</h3>\r\n            <h4>Real Feel: {feels_like} {unit}</h4>\r\n            <h4>Pressure: {pressure} hPa</h4>\r\n            <h4>Humidity: {humidity}%</h4>\r\n            <h4>Min: {temp_min} {unit}</h4>\r\n            <h4>Max: {temp_max} {unit}</h4>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default WeatherCard;","const handleFetch = async (searchTerm, imperialUnit) => {\r\n\r\n    if (Array.isArray(searchTerm)) {\r\n        const lat = searchTerm[0];\r\n        const lon = searchTerm[1];\r\n        const {currentWeather, forecast} = await fetchWeather(lat, lon, imperialUnit);\r\n        return {currentWeather, forecast};\r\n\r\n    } else if (typeof searchTerm === 'string') {\r\n        const geolocation = await fetchGeolocation(searchTerm);\r\n        const lat = geolocation.latt;\r\n        const lon = geolocation.longt;\r\n        const {currentWeather, forecast} = await fetchWeather(lat, lon, imperialUnit);\r\n        return {currentWeather, forecast, geolocation};\r\n    }\r\n}\r\n\r\n\r\nasync function fetchGeolocation(searchTerm) {\r\n    const KEY = '12038227860412e15757698x95258';\r\n    searchTerm = searchTerm.replace(/ +(?= )/g,'').trim();\r\n    let geolocation;\r\n\r\n    try{\r\n        const response = await fetch (`https://geocode.xyz/${searchTerm}?json=1&auth=${KEY}`);\r\n        const responseJSON = await response.json();\r\n        geolocation = responseJSON;\r\n    } catch(error) {\r\n        throw new Error(error)\r\n    }\r\n\r\n    if (geolocation.error) throw new Error(geolocation.error.description); // this api handles not found this way\r\n    return geolocation;\r\n}\r\n\r\n\r\nasync function fetchWeather(lat, lon, imperialUnit) {\r\n    const APIKEY = '30d2d7664fe7b2ac7e54fdca4bc7f915';\r\n    const unit = imperialUnit ? 'imperial' : 'metric';\r\n\r\n    const currentWeatherPromise = fetch (`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=${unit}&appid=${APIKEY}`)\r\n    .then((response) => {\r\n    if (response.ok) {\r\n        return response.json();\r\n    } else {\r\n        throw new Error('Something went wrong');\r\n    }})\r\n\r\n    const forecastPromise = fetch (`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&units=${unit}&exclude=current,minutely,hourly&appid=${APIKEY}`)\r\n    .then((response) => {\r\n    if (response.ok) {\r\n        return response.json();\r\n    } else {\r\n        throw new Error('Something went wrong');\r\n    }})\r\n\r\n    let currentWeather, forecast;\r\n    try {\r\n        const response = await Promise.all([currentWeatherPromise, forecastPromise]);\r\n        currentWeather = response[0];\r\n        forecast = response[1]\r\n    } catch (error) {\r\n        throw new Error(error)\r\n    }\r\n    \r\n    forecast.daily.shift(0); // removes current day on forecast\r\n    return {currentWeather, forecast};\r\n}\r\n\r\nexport default handleFetch;\r\n","import React from 'react'\r\nimport styled from '@emotion/styled';\r\nimport errorIcon from './error_icon.png';\r\n\r\nconst ErrorImage = styled.img `\r\n    width:300px;\r\n    margin:0 auto;\r\n`\r\nconst ErrorText = styled.span `\r\n    font-family:'Roboto';\r\n    font-size:20px;\r\n    margin:0 auto;\r\n    margin-bottom:5px;\r\n    color:black;\r\n`\r\n\r\nconst Error = () => {\r\n    return (\r\n        <>\r\n            <ErrorText>Something went wrong</ErrorText>\r\n            <ErrorImage src={errorIcon} alt='Error icon'></ErrorImage>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Error;","import React,{useState, useEffect} from 'react';\r\nimport styled from '@emotion/styled';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { useFetchOnClick } from '../hooks/useFetchOnClick';\r\nimport Loading from './Loading/Loading';\r\nimport Forecast from './Forecast';\r\nimport WeatherCard from './WeatherCard';\r\nimport fetchFunction from '../handle-fetch';\r\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport {keyframes} from '@emotion/core';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Error from './Error/Error'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  locationBtn:{\r\n    position: 'absolute',\r\n    right: 10,\r\n    top:10,\r\n  },\r\n  input: {\r\n    marginLeft: theme.spacing(1),\r\n    flex: 1,\r\n  },\r\n  iconButton: {\r\n    padding: 10,\r\n  },\r\n}));\r\n\r\nconst wind = keyframes `\r\n    0% {\r\n    background-position: 0 200px, 0 300px, 100px 250px;\r\n    }\r\n    100% {\r\n        background-position: 1000px 200px, 1200px 300px, 1100px 250px;\r\n    }\r\n`\r\n\r\nconst Container = styled.section `\r\n    margin:0 auto;\r\n    min-height:100vh;\r\n    display:flex;\r\n    flex-direction: column;\r\n    font-family:'Roboto';\r\n    position:relative;\r\n    background-color: #8EC5FC;\r\n    background-image: linear-gradient(62deg, #8EC5FC 0%, #E0C3FC 100%);\r\n`\r\n\r\nconst SearchForm = styled(Paper) `\r\n    margin:50px auto;\r\n    margin-top:75px;\r\n    padding: 2px 4px;\r\n    display: flex;\r\n    align-items: center;\r\n    width: 400px;\r\n    @media (max-width:768px) {\r\n        margin-top:75px;\r\n        width:310px;\r\n    }\r\n`\r\n\r\nconst SwitchContainer = styled.label `\r\n    display:flex;\r\n    align-items:center;\r\n    position:absolute;\r\n    top:10px;\r\n    left:10px;\r\n`\r\n\r\nconst AnimationWrapper = styled.div `\r\n    display:flex;\r\n    flex-direction: column;\r\n    font-family:'Roboto';\r\n    position:relative;\r\n    min-height:100vh;\r\n    background: url(https://static.radulescu.me/examples/clouds/clouds1000.png);\r\n    background: url(https://static.radulescu.me/examples/clouds/clouds1000.png) 0 200px,\r\n                url(https://static.radulescu.me/examples/clouds/clouds1200_1.png) 0 300px,\r\n                url(https://static.radulescu.me/examples/clouds/clouds1000_blur3.png) 100px 250px;\r\n    animation: ${wind} 120s linear infinite;\r\n`\r\n\r\nconst WeatherSearch = () => {\r\n    const [input, setInput] = useState('');\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [imperialUnit, setimperialUnit] = useState(true);\r\n    const { data, loading, error } = useFetchOnClick(fetchFunction, searchTerm, imperialUnit);\r\n    const classes = useStyles();\r\n\r\n    function successGeo(pos) {\r\n        setSearchTerm([pos.coords.latitude, pos.coords.longitude])\r\n    }\r\n\r\n    function errorGeo(e) {\r\n        console.log(e)\r\n    }\r\n    \r\n    useEffect(() => {\r\n        navigator.geolocation.getCurrentPosition(successGeo, errorGeo);\r\n    }, [])\r\n\r\n    function handleGeolocationClick(){\r\n        navigator.geolocation.getCurrentPosition(successGeo, errorGeo);\r\n    }\r\n\r\n    function handleUnitChange() {\r\n        setimperialUnit(!imperialUnit);\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <AnimationWrapper>\r\n                <SearchForm \r\n                component=\"form\" \r\n                className={classes.root} \r\n                onSubmit={ (e) => {e.preventDefault();} }>\r\n                    <InputBase\r\n                            className={classes.input}\r\n                            placeholder=\"Search city\"\r\n                            inputProps={{ 'aria-label': 'Search city' }}\r\n                            onChange={(e) => {setInput(e.target.value)}} value={input}\r\n                        />\r\n                    <IconButton\r\n                        type=\"submit\" \r\n                        className={classes.iconButton} \r\n                        aria-label=\"search\"\r\n                        onClick={ () => {setSearchTerm(input)} }\r\n                    >\r\n                        <SearchIcon />\r\n                    </IconButton>\r\n                </SearchForm> \r\n\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.locationBtn}\r\n                    endIcon={<LocationOnIcon />}\r\n                    onClick={ () => handleGeolocationClick() }\r\n                >\r\n                    Find me\r\n                </Button>\r\n\r\n                <SwitchContainer>\r\n                    <Grid item>F°</Grid>\r\n                    <Grid item>\r\n                        <Switch onChange={() => {handleUnitChange()} } value={imperialUnit} color=\"default\" />\r\n                    </Grid>\r\n                    <Grid item>C°</Grid>\r\n                </SwitchContainer>\r\n\r\n                {loading && <Loading />}\r\n                {error && <Error />}\r\n                {data &&\r\n                    <>\r\n                        <WeatherCard\r\n                            currentWeather = {data.currentWeather}\r\n                            location = {data.geolocation}\r\n                            imperialUnit = {imperialUnit}\r\n                        />\r\n                        <Forecast \r\n                            forecast = {data.forecast}\r\n                            imperialUnit = {imperialUnit}\r\n                        />\r\n                    </>\r\n                }\r\n            </AnimationWrapper>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default WeatherSearch;\r\n","import React from 'react';\r\nimport WeatherSearch from './components/WeatherSearch';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <WeatherSearch />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}